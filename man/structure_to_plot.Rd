% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/structure_to_plot.R
\name{structure_to_plot}
\alias{structure_to_plot}
\title{Transform Structured Data Lists into a Tidy Data Frame for Plotting}
\usage{
structure_to_plot(data_list)
}
\arguments{
\item{data_list}{A named list containing the data to be transformed. The structure and naming
conventions of this list determine how the data is processed.
\itemize{
\item \strong{1st structure:} List with country names as keys and named vectors of year-values.
Expected when \code{names(data_list)} are country codes matching \code{show_countries_lis()} or \code{show_countries_lws()}.
\item \strong{2nd structure:} List with \code{ccyy} abbreviations as keys, and named numeric/integer vectors, where names represent categories.
Typically output from functions grouped by a categorical variable, e.g. \code{"educ"}.
\item \strong{3rd structure:} List with \code{ccyy} abbreviations as keys, each containing sublists of named vectors.
Represents more complex summaries with multiple grouping variables, percentiles, or shares.
}}
}
\value{
A tidy \code{data.frame} with the following columns (depending on input structure):
\itemize{
\item \code{cname}: Country name.
\item \code{year}: Year.
\item \code{dname}: Dataset country-year code in the \code{ccyy} form.
\item \code{category}: (2nd and 3rd structure) Grouping variable categories.
\item \code{share} / \code{percentile} / \code{by_var}: (3rd structure) Variable describing the vector names.
\item \code{value}: Numeric values from the input list.
}
}
\description{
This function takes a nested list of data (with up to three possible structures)
and transforms it into a tidy \code{data.frame} suitable for visualization in LISSY.
It supports three structures, typically outputs by weighted summary functions in lissyrtools such as:
\code{run_weighted_mean()}, \code{run_weighted_percentiles()}, and \code{run_weighted_count()}.
}
\details{
Depending on the summary statistics computed before, the function renames one of the columns in the 3rd structure based on pattern matching:
\itemize{
\item If the values contains "\%" and "-", the column is renamed to \code{share}.
\item If the values contains "\%", renamed to \code{percentile}.
\item Otherwise, renamed to \code{by_var}.
}
}
\examples{
\dontrun{

library(ggplot2)
library(lissyrtools)
library(RColorBrewer)
library(ggthemes)

data <- lissyrtools::lissyuse(data = c("es", "de"), vars = c("dhi", "educ", "pi11", "rural"), from = 2016)

# Example usage for 1st structure
weighted_means <- run_weighted_mean(data, "pi11")
df1 <- structure_to_plot(weighted_means)

# Example usage for 2nd structure
weighted_means_educ <- run_weighted_mean(data, "pi11", by = "educ")
df2 <- structure_to_plot(weighted_means_educ)

# Example usage for 3rd structure
weighted_percentiles <- run_weighted_percentiles(data, "pi11", by = "educ")
df3 <- structure_to_plot(weighted_percentiles)

# Example usage for 3rd structure but with shares
weighted_percentiles <- run_weighted_percentiles(data, "pi11", by = "educ", share = TRUE)
df3 <- structure_to_plot(weighted_percentiles)



# Chart example: Plotting education group shares over years by country
 

run_weighted_count(data, "educ", percent = TRUE, na.rm = TRUE) \%>\%
  structure_to_plot() \%>\%
  ggplot(aes(x = year, y = value, color = cname, group = interaction(cname, category))) +
  geom_line(linewidth = 1.2) +
  geom_point(size = 0.6) +
  scale_color_stata() +
  labs(
    x = "Year",
    y = "Share of Education Group (\%)",
    color = "Country"
  ) + 
  expand_limits(y = 0) + 
  facet_grid(~fct_relevel(category, 'low', 'medium', 'high')) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 25, hjust = 1))
  

# Another example: plotting weighted mean of 'dhi' over years by country
data \%>\%
  map(~ .x \%>\% filter(relation == 1000) \%>\% mutate(new_wgt = nhhmem * hwgt)) \%>\%
  apply_ppp_adjustment("dhi", "lis", "lisppp") \%>\%
  run_weighted_mean("dhi", "new_wgt") \%>\%
  structure_to_plot() \%>\%
  ggplot(aes(x = year, y = value, color = cname, group = cname)) +
  geom_point() +
  geom_line() +
  labs(
    title = "dhi trend",
    caption = "Source: Luxembourg Income Study"
  ) +
  scale_color_stata() +
  scale_y_continuous(labels = scales::comma) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 25, hjust = 1))
}
}
